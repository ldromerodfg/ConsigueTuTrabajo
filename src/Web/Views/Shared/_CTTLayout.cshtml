@{
    IgnoreBody();
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:light,medium,bold">
    <style>
        body {
            font-family: 'Roboto', serif;
            background-color: #f2f7f9 !important;
        }

        p {
            margin: 0;
            margin-bottom: 1px;
        }

        #input-search {
            width: 180px;
            font-size: 0.7rem;
        }

        #btn-search {
            font-size: 0.7rem;
            outline: none !important;
            background-color: #2f444f !important;
            font-weight: bold;
        }

        .position-box {
            font-size: 0.7rem;
        }

        .btn-apply {
            font-size: 0.7rem;
            color: #fff;
            background-color: #00b8e4;
            border: none;
            font-weight: bold;
            border-radius: 5px;
            padding: 5px 10px 5px 10px
        }

        .bi.bi-geo-alt-fill,
        .bi.bi-building {
            color: #00b8e4;
            font-weight: bold;
        }

        .bi.bi-building {
            margin-left: 5px;
        }

        .position-name {
            font-weight: bolder;
        }

        #dropdown-location button,
        #dropdown-location ul li a,
        #dropdown-position-type button,
        #dropdown-position-type ul li a {
            border: none;
            background-color: #fff;
            font-size: 0.8rem;
            font-weight: lighter;
            color: gray;
        }
    </style>
</head>

<body>
    <div class="container pt-1">
        <div id="row-search" class="row">
            <div class="col-auto">
                <div class="position-relative">
                    <input id="input-search" type="text" class="form-control ps-4"
                        placeholder="Buscar puesto de trabajo">
                    <div class="d-flex h-100 position-absolute top-0 ps-1 justify-content-center flex-column">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-search" viewBox="0 0 16 16">
                            <path
                                d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                        </svg>
                    </div>
                </div>
            </div>
            <div class="col-auto p-0">
                <button class="btn btn-dark" id="btn-search">Buscar empleos</button>
            </div>
        </div>
        <div id="row-filters-mobile" class="row pt-2">
            <div class="col-auto">
                <div id="dropdown-location" class="dropdown">
                    <button class="dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Localización
                    </button>
                    <ul id="dropdown-location-ul" class="dropdown-menu" aria-labelledby="">

                    </ul>
                </div>
            </div>
            <div class="col-auto">
                <div id="dropdown-position-type" class="dropdown">
                    <button class="dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Tipo de contrato
                    </button>
                    <ul id="dropdown-position-type-ul" class="dropdown-menu" aria-labelledby="">

                    </ul>
                </div>
            </div>
        </div>
        <div id="row-positions-list" class="row">
            <div class="col">
                <div id="positions-list" class="pt-3"></div>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"
        integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>
    <script>
        var _cityId = null
        var _positionType = null

        $(document).ready(() => {
            getPositions()
                .then((positions) => {
                    startup(positions)
                    fillLocationsDropdown(positions)
                    fillPositionTypeDropdown(positions)
                })
        })

        function startup(positions) {
            fillPositionsList(positions)
        }

        function fillPositionsList(positions) {
            $('#positions-list').empty()
            $.each($(positions), (i, position) => {
                $('#positions-list').append(buildPositionBox(position))
            })
        }

        function getPositions(cityId = null, positionType = null) {
            var url = 'api/v1/positions?state=published'

            if (cityId != null) {
                url += `&cityId=${cityId}`
            }

            if (positionType != null) {
                url += `&positionTypeId=${positionType}`
            }

            return new Promise((resolve, reject) => {
                $.get(url, (r) => {
                    resolve(r)
                })
            })
        }

        function setEvents() {
            $('.dropdown-location-item').unbind('click').click((e) => {
                _cityId = $(e.target).data('city-id')
                getPositions(_cityId, _positionType)
                    .then((positions) => {
                        startup(positions)
                    })
            })
            $('.dropdown-position-type-item').unbind('click').click((e) => {
                _positionType = $(e.target).data('position-type-id')
                getPositions(_cityId, _positionType)
                    .then((positions) => {
                        startup(positions)
                    })
            })
        }

        function fillLocationsDropdown(positions) {
            $('#dropdown-location-ul').empty()

            var locations = positions.map(({ location, cityId }) => ({ location, cityId }))

            locations = unique(locations, ['location', 'cityId'])

            $('#dropdown-location-ul').append(
                `<li><a data-city-id="null" class="dropdown-item dropdown-location-item">Todos</a></li>`
            )

            $.each(locations, (i, location) => {
                if (location.location != null) {
                    $('#dropdown-location-ul').append(
                        `<li><a data-city-id="${location.cityId}" class="dropdown-item dropdown-location-item">
                            ${location.location}</a></li>`
                    )
                }
            })

            setEvents()
        }

        function fillPositionTypeDropdown(positions) {
            $('#dropdown-position-type-ul').empty()

            var positionTypes = positions.map(({ type, positionTypeId }) => ({ type, positionTypeId }))

            positionTypes = unique(positionTypes, ['type', 'positionTypeId'])

            $('#dropdown-position-type-ul').append(
                `<li><a data-position-type-id="null" class="dropdown-item dropdown-position-type-item">Todos</a></li>`
            )

            $.each(positionTypes, (i, positionType) => {
                if (positionType.type != null) {
                    $('#dropdown-position-type-ul').append(
                        `<li><a data-position-type-id="${positionType.positionTypeId}" class="dropdown-item dropdown-position-type-item">
                            ${positionType.type}</a></li>`
                    )
                }
            })

            setEvents()
        }


        function buildPositionBox(position) {
            let name = position.name.length > 35
                ? `${position.name.substring(0, 34)}...`
                : position.name

            let locationIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" 
                class="bi bi-geo-alt-fill" viewBox="0 0 16 16">
                <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"/></svg>`

            let buildingIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" 
                class="bi bi-building" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M14.763.075A.5.5 0 0 1 15 .5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V14h-1v1.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V10a.5.5 0 0 1 .342-.474L6 7.64V4.5a.5.5 0 0 1 .276-.447l8-4a.5.5 0 0 1 .487.022zM6 8.694 1 10.36V15h5V8.694zM7 15h2v-1.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5V15h2V1.309l-7 3.5V15z"/>
                <path d="M2 11h1v1H2v-1zm2 0h1v1H4v-1zm-2 2h1v1H2v-1zm2 0h1v1H4v-1zm4-4h1v1H8V9zm2 0h1v1h-1V9zm-2 2h1v1H8v-1zm2 0h1v1h-1v-1zm2-2h1v1h-1V9zm0 2h1v1h-1v-1zM8 7h1v1H8V7zm2 0h1v1h-1V7zm2 0h1v1h-1V7zM8 5h1v1H8V5zm2 0h1v1h-1V5zm2 0h1v1h-1V5zm0-2h1v1h-1V3z"/>
                </svg>`

            return `<div class="position-box py-2 w-100 d-flex flex-row justify-content-between">
                        <div class="p-1">
                            <p class="position-name">${name}</p> 
                            <p>${position.company}</p>
                            <p>${(position.location != null ? `${locationIcon} ${position.location}` : '')}
                                ${(position.location != null && position.location.length > 20 ? '<br class="d-md-none">' : '')}
                                ${(position.type != null ? `${buildingIcon} ${position.type}` : '')}</p>
                        </div>
                        <div class="d-flex align-items-center">
                            <div class="d-flex">
                                <button class="btn btn-apply d-flex">Solicitar</button></div>
                            </div>
                        </div> `
        }

        function unique(arr, keyProps) {
            const kvArray = arr.map(entry => {
                const key = keyProps.map(k => entry[k]).join('|');
                return [key, entry];
            });
            const map = new Map(kvArray);
            return Array.from(map.values());
        }
    </script>
</body>

</html>
